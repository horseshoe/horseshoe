plugins {
	id 'checkstyle'
	id 'java-library'
	id 'jacoco'
	id 'maven-publish'
	id 'signing'
	id 'org.sonarqube' version '2.8'
}

repositories {
	mavenCentral()
}

checkstyle {
	configDirectory = file("${projectDir}/config/checkstyle")
	toolVersion = 'latest.release'
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_7
	targetCompatibility = JavaVersion.VERSION_1_7
}

test {
	finalizedBy jacocoTestReport
}

dependencies {
	testImplementation 'junit:junit:4.+'
	testImplementation 'com.github.stefanbirkner:system-rules:1.+'
	testImplementation 'org.yaml:snakeyaml:1.+'
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

java {
	withJavadocJar()
	withSourcesJar()
}

javadoc {
	include '**/horseshoe/*.java'
	title = 'Horseshoe'
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled true
	}
}

def getVersion = { ->
	def stdout = new ByteArrayOutputStream()
	def result = exec {
		commandLine 'git', 'describe', '--tags', '--match', 'v[0-9]*'
		standardOutput = stdout
		ignoreExitValue true
	}
	if (result.getExitValue() != 0) {
		return 'unspecified'
	}
	return stdout.toString().trim().substring(1)
}

// Run gradle with "-Dsnapshot=true" to enable snapshots
def isSnapshot = Boolean.getBoolean('snapshot')
version = getVersion() + (isSnapshot ? '-SNAPSHOT' : '')

jar {
	manifest {
		attributes 'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'Main-Class': 'horseshoe.Runner'
	}
}

tasks.withType(Jar) {
	from('LICENSE') {
		into 'META-INF'
	}
}

publishing {
	repositories {
		maven {
			url = { isSnapshot ? snapshotRepositoryUrl : releaseRepositoryUrl }
			credentials {
				username = System.getenv('SONATYPE_USER')
				password = System.getenv('SONATYPE_PASSWORD')
			}
		}
	}
	publications {
		sonatype(MavenPublication) {
			artifactId = artifact
			from components.java
			pom {
				def repository = System.getenv('GITHUB_REPOSITORY')
				def repoUrl = System.getenv('GITHUB_SERVER_URL') + "/${repository}"
				def baseRepoUrl = repoUrl.substring('https://'.length())
				name = 'Horseshoe'
				description = 'Horseshoe for Java is a templating system used to generate source code and other dynamic content from a template and organized data. It uses a Mustache-like syntax with extended expressions for dynamic data manipulation.'
				url = repoUrl
				organization {
					name = group
					url = repoUrl.substring(0, repoUrl.lastIndexOf('/'))
				}
				issueManagement {
					system = 'GitHub'
					url = "${repoUrl}/issues"
				}
				licenses {
					license {
						name = 'MIT License'
						url = "${repoUrl}/blob/master/LICENSE"
					}
				}
				scm {
					connection = "scm:git:git://${baseRepoUrl}.git"
					developerConnection = "scm:git:ssh://${baseRepoUrl}.git"
					url = repoUrl
				}
				withXml {
					def devs = asNode().appendNode('developers')
					def authors = (file('AUTHORS').text =~ /(.*?) <(.*?)>/).findAll()
					authors.each {
						def dev = devs.appendNode('developer')
						dev.appendNode('name', it[1])
						dev.appendNode('email', it[2])
					}
				}
			}
		}
	}
}

signing {
	required = { gradle.taskGraph.hasTask('uploadArchives') }
	def signingKey = System.getenv('PGP_SIGNING_KEY')
	def signingPassword = System.getenv('PGP_SIGNING_PASSWORD')
	useInMemoryPgpKeys(signingKey, signingPassword)
	sign publishing.publications
}